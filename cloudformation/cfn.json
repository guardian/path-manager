{
    "AWSTemplateFormatVersion":"2010-09-09",
    "Description":"path-manager",
    "Parameters":{
        "KeyName":{
            "Description":"The EC2 Key Pair to allow SSH access to the instance",
            "Type":"AWS::EC2::KeyPair::KeyName",
            "Default":"composer-team"
        },
        "Stage":{
            "Description":"Environment name",
            "Type":"String",
            "AllowedValues":[ "PROD", "CODE", "QA", "TEST", "RELEASE" ]
        },
        "VpcId": {
            "Description": "ID of the VPC onto which to launch the application eg. vpc-1234abcd",
            "Type": "AWS::EC2::VPC::Id",
            "Default": "vpc-381fa95d"
        },
        "PublicVpcSubnets": {
            "Description": "Subnets to use in VPC for public internet-facing ELB eg. subnet-abcd1234",
            "Type": "List<AWS::EC2::Subnet::Id>",
            "Default": "subnet-c3620fa6,subnet-2b37bd5c,subnet-3667c86f"
        },
        "PrivateVpcSubnets": {
            "Description": "Subnets to use in VPC for private EC2 instances eg. subnet-abcd1234",
            "Type": "List<AWS::EC2::Subnet::Id>",
            "Default": "subnet-c2620fa7,subnet-2a37bd5d,subnet-2967c870"
        },
        "MachineImagesAMI": {
            "Description": "AMI id from the machine-images repo",
            "Type": "AWS::EC2::Image::Id"
        },
        "SSLCertificateARN": {
            "Description": "The ARN of the SSL certificate to use in the ELB",
            "Type": "String"
        },
        "GuardianIP": {
            "Description": "Ip range for the office",
            "Type": "String",
            "Default": "77.91.248.0/21"
        }
    },

    "Conditions":{
        "IsProd": {"Fn::Equals" : [{"Ref":"Stage"}, "PROD"]}
    },

    "Resources":{

        "PathManagerRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [ {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [ "ec2.amazonaws.com" ]
                        },
                        "Action": [ "sts:AssumeRole" ]
                    } ]
                },
                "Path": "/"
            }
        },

        "PathManagerDynamoPolicy" : {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "PathManagerDynamoEC2Policy",
                "PolicyDocument": {
                    "Statement": [ {
                        "Action": ["dynamodb:*"],
                        "Effect": "Allow",
                        "Resource": {"Fn::Join": [ "", [ "arn:aws:dynamodb:",{"Ref": "AWS::Region"},":",{"Ref": "AWS::AccountId"},":table/",{"Ref": "Stage"},"-pathManager-sequence"]]}
                    },{
                        "Action": ["dynamodb:*"],
                        "Effect": "Allow",
                        "Resource": {"Fn::Join": [ "", [ "arn:aws:dynamodb:",{"Ref": "AWS::Region"},":",{"Ref": "AWS::AccountId"},":table/",{"Ref": "Stage"},"-pathManager-paths"]]}
                    },{
                        "Action": ["dynamodb:*"],
                        "Effect": "Allow",
                        "Resource": {"Fn::Join": [ "", [ "arn:aws:dynamodb:",{"Ref": "AWS::Region"},":",{"Ref": "AWS::AccountId"},":table/",{"Ref": "Stage"},"-pathManager-paths/index/id-index"]]}
                    }]
                },
                "Roles": [ { "Ref": "PathManagerRole" } ]
            }
        },

        "PathManagerDescribePolicy" : {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "PathManagerDescribePolicy",
                "PolicyDocument": {
                    "Statement": [ {
                        "Action": ["EC2:Describe*"],
                        "Effect": "Allow",
                        "Resource":"*"
                    }]
                },
                "Roles": [ { "Ref": "PathManagerRole" } ]
            }
        },

        "PathManagerGetDistributablesPolicy" : {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "PathManagerGetDistributablesPolicy",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [ "s3:GetObject" ],
                            "Resource": [ "arn:aws:s3:::composer-dist/*" ]
                        }
                    ]
                },
                "Roles": [ { "Ref": "PathManagerRole" } ]
            }
        },

        "PathManagerCloudwatchPolicy" : {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "PathManagerCloudwatchPolicy",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [ "cloudwatch:*" ],
                            "Resource": "*"
                        }
                    ]
                },
                "Roles": [ { "Ref": "PathManagerRole" } ]
            }
        },

        "PathManagerInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [ {"Ref": "PathManagerRole"} ]
            }
        },

        "SSHSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow SSH access from the office",
                "VpcId": {"Ref": "VpcId"},
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },

        "AppServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "path manager application servers",
                "VpcId": {"Ref": "VpcId"},
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 9000,
                        "ToPort": 9000,
                        "CidrIp": {"Ref": "GuardianIP"}
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 9000,
                        "ToPort": 9000,
                        "SourceSecurityGroupId": { "Ref": "PublicLoadBalancerSecurityGroup"}
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 9000,
                        "ToPort": 9000,
                        "SourceSecurityGroupId": { "Ref": "InternalLoadBalancerSecurityGroup"}
                    }
                ]
            }
        },

        "PublicLoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "path manager application load balancer",
                "VpcId": {"Ref": "VpcId"},
                "SecurityGroupIngress": [
                    { "IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "CidrIp": "77.91.251.206/31" },
                    { "IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "CidrIp": "77.91.252.206/31" },
                    { "IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "CidrIp": "77.91.251.220/31" },
                    { "IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "CidrIp": "54.72.146.251/32" },
                    { "IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "CidrIp": "54.154.55.123/32" },
                    { "IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "CidrIp": "54.154.66.109/32" },

                    { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "77.91.251.206/31" },
                    { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "77.91.252.206/31" },
                    { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "77.91.251.220/31" },
                    { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "54.72.146.251/32" },
                    { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "54.154.55.123/32" },
                    { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "54.154.66.109/32" }
                ]
            }
        },

        "PublicPathManagerLoadBalancer" : {
            "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties" : {
                "SecurityGroups": [{ "Fn::GetAtt": ["PublicLoadBalancerSecurityGroup", "GroupId"] }],
                "CrossZone": true,
                "Subnets": {"Ref": "PublicVpcSubnets"},
                "Listeners" : [ {
                    "LoadBalancerPort": "443",
                    "InstancePort": "9000",
                    "Protocol": "HTTPS",
                    "SSLCertificateId": { "Ref": "SSLCertificateARN"}
                },{
                    "LoadBalancerPort": "80",
                    "InstancePort": "9000",
                    "Protocol": "HTTP"
                } ],

                "HealthCheck" : {
                    "Target" : "HTTP:9000/management/healthcheck",
                    "HealthyThreshold" : "2",
                    "UnhealthyThreshold" : "2",
                    "Interval" : "10",
                    "Timeout" : "5"
                },
                "Tags":[
                    {
                        "Key":"Stage",
                        "Value":{
                            "Ref":"Stage"
                        }
                    },
                    {
                        "Key": "Stack",
                        "Value": "flexible"
                    },
                    {
                        "Key":"App",
                        "Value":"path-manager"
                    },
                    {
                        "Key":"Loadbalancer",
                        "Value":"internet-facing"
                    }
                ]
            }
        },

        "InternalLoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "internal path manager application load balancer",
                "VpcId": {"Ref": "VpcId"},
                "SecurityGroupIngress": [
                    { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "10.248.200.0/21" }
                ]
            }
        },

        "InternalPathManagerLoadBalancer" : {
            "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties" : {
                "SecurityGroups": [{ "Fn::GetAtt": ["InternalLoadBalancerSecurityGroup", "GroupId"] }],
                "Scheme": "internal",
                "CrossZone": true,
                "Subnets": {"Ref": "PrivateVpcSubnets"},
                "Listeners" : [ {
                    "LoadBalancerPort": "80",
                    "InstancePort": "9000",
                    "Protocol": "HTTP"
                } ],
                "HealthCheck" : {
                    "Target" : "HTTP:9000/management/healthcheck",
                    "HealthyThreshold" : "2",
                    "UnhealthyThreshold" : "2",
                    "Interval" : "10",
                    "Timeout" : "5"
                },
                "Tags":[
                    {
                        "Key":"Stage",
                        "Value":{
                            "Ref":"Stage"
                        }
                    },
                    {
                        "Key": "Stack",
                        "Value": "flexible"
                    },
                    {
                        "Key":"App",
                        "Value":"path-manager"
                    },
                    {
                        "Key":"Loadbalancer",
                        "Value":"internal"
                    }
                ]
            }
        },

        "AutoscalingGroup":{
            "Type":"AWS::AutoScaling::AutoScalingGroup",
            "Properties":{
                "AvailabilityZones": {"Fn::GetAZs": ""},
                "VPCZoneIdentifier": {"Ref": "PrivateVpcSubnets"},
                "LaunchConfigurationName":{ "Ref":"PathManagerLaunchConfig" },
                "MinSize": { "Fn::If" : [ "IsProd", 2, 1]},
                "MaxSize": { "Fn::If" : [ "IsProd", 4, 2]},
                "HealthCheckType" : "ELB",
                "HealthCheckGracePeriod": 300,
                "LoadBalancerNames" : [ { "Ref": "PublicPathManagerLoadBalancer" }, { "Ref": "InternalPathManagerLoadBalancer" }],
                "Tags":[
                    {
                        "Key":"Stage",
                        "Value":{
                            "Ref":"Stage"
                        },
                        "PropagateAtLaunch":"true"
                    },
                    {
                        "Key": "Stack",
                        "Value": "flexible",
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key":"App",
                        "Value":"path-manager",
                        "PropagateAtLaunch":"true"
                    }
                ]
            }
        },

        "PathManagerLaunchConfig":{
            "Type":"AWS::AutoScaling::LaunchConfiguration",
            "Properties":{
                "KeyName":{ "Ref":"KeyName" },
                "ImageId":{ "Ref":"MachineImagesAMI" },
                "SecurityGroups": [
                    { "Ref": "AppServerSecurityGroup" },
                    { "Ref": "SSHSecurityGroup" }
                ],
                "InstanceType": "t2.micro",
                "IamInstanceProfile": {"Ref": "PathManagerInstanceProfile"},
                "UserData":{
                    "Fn::Base64":{
                        "Fn::Join":["", [
                            "#!/bin/bash -ev\n",
                            "/opt/features/native-packager/install.sh -b composer-dist -t tgz -s\n"
                        ]]
                    }
                }
            }
        }
    }
}
