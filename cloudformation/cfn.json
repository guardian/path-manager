{
    "AWSTemplateFormatVersion":"2010-09-09",
    "Description":"path-manager",
    "Parameters":{
        "KeyName":{
            "Description":"The EC2 Key Pair to allow SSH access to the instance",
            "Type":"String",
            "Default":"composer-team"
        },
        "Stage":{
            "Description":"Environment name",
            "Type":"String",
            "AllowedValues":[ "PROD", "CODE", "QA", "TEST", "RELEASE" ],
            "Default": "PROD"
        },
        "VpcId": {
            "Description": "ID of the VPC onto which to launch the application eg. vpc-1234abcd",
            "Type": "String",
            "Default": "vpc-143ef571"
        },
        "PublicVpcSubnets": {
            "Description": "Subnets to use in VPC for public internet-facing ELB eg. subnet-abcd1234",
            "Type": "CommaDelimitedList",
            "Default": "subnet-101f9875, subnet-4f17bb38, subnet-90d414c9"
        },
        "PrivateVpcSubnets": {
            "Description": "Subnets to use in VPC for private EC2 instances eg. subnet-abcd1234",
            "Type": "CommaDelimitedList",
            "Default": "subnet-131f9876, subnet-4e17bb39, subnet-93d414ca"
        },
        "SSLCertificateARN": {
            "Description": "The ARN of the SSL certificate to use in the ELB",
            "Type": "String"
        },
        "GuardianIP": {
            "Description": "Ip range for the office",
            "Type": "String",
            "Default": "77.91.248.0/21"
        }
    },

    "Resources":{

        "SequenceDynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [
                    {
                        "AttributeName": "sequenceName",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [
                    {
                        "AttributeName": "sequenceName",
                        "KeyType": "HASH"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": "5",
                    "WriteCapacityUnits": "5"
                },
                "TableName": {
                    "Fn::Join": ["-", [
                        {
                            "Ref": "Stage"
                        },
                        "pathManager-sequence"
                    ]]
                }
            },
            "DeletionPolicy" : "Retain"
        },

        "PathsDynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [
                    {
                        "AttributeName": "path",
                        "AttributeType": "S"
                    },
                    {
                        "AttributeName": "identifier",
                        "AttributeType": "N"
                    },
                    {
                        "AttributeName": "type",
                        "AttributeType": "S"
                    }
                ],
                "GlobalSecondaryIndexes": [
                    {
                        "IndexName": "id-index",
                        "KeySchema": [
                            {
                                "AttributeName": "identifier",
                                "KeyType": "HASH"
                            },
                            {
                                "AttributeName": "type",
                                "KeyType": "RANGE"
                            }
                        ],
                        "Projection": {
                            "ProjectionType": "ALL"
                        },
                        "ProvisionedThroughput": {
                            "ReadCapacityUnits": "10",
                            "WriteCapacityUnits": "10"
                        }
                    }
                ],

                "KeySchema": [
                    {
                        "AttributeName": "path",
                        "KeyType": "HASH"
                    }
                ],

                "ProvisionedThroughput": {
                    "ReadCapacityUnits": "10",
                    "WriteCapacityUnits": "10"
                },
                "TableName": {
                    "Fn::Join": ["-", [
                        {
                            "Ref": "Stage"
                        },
                        "pathManager-paths"
                    ]]
                }
            },
            "DeletionPolicy" : "Retain"
        },

        "PathManagerRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [ {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [ "ec2.amazonaws.com" ]
                        },
                        "Action": [ "sts:AssumeRole" ]
                    } ]
                },
                "Path": "/"
            }
        },

        "PathManagerDynamoPolicy" : {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "PathManagerDynamoEC2Policy",
                "PolicyDocument": {
                    "Statement": [ {
                        "Action": ["dynamodb:*"],
                        "Effect": "Allow",
                        "Resource": {"Fn::Join": [ "", [ "arn:aws:dynamodb:",{"Ref": "AWS::Region"},":",{"Ref": "AWS::AccountId"},":table/",{"Ref": "Stage"},"-pathManager-sequence"]]}
                    },{
                        "Action": ["dynamodb:*"],
                        "Effect": "Allow",
                        "Resource": {"Fn::Join": [ "", [ "arn:aws:dynamodb:",{"Ref": "AWS::Region"},":",{"Ref": "AWS::AccountId"},":table/",{"Ref": "Stage"},"-pathManager-paths"]]}
                    },{
                        "Action": ["dynamodb:*"],
                        "Effect": "Allow",
                        "Resource": {"Fn::Join": [ "", [ "arn:aws:dynamodb:",{"Ref": "AWS::Region"},":",{"Ref": "AWS::AccountId"},":table/",{"Ref": "Stage"},"-pathManager-paths/index/id-index"]]}
                    }]
                },
                "Roles": [ { "Ref": "PathManagerRole" } ]
            }
        },

        "PathManagerDescribePolicy" : {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "PathManagerDescribePolicy",
                "PolicyDocument": {
                    "Statement": [ {
                        "Action": ["EC2:Describe*"],
                        "Effect": "Allow",
                        "Resource":"*"
                    }]
                },
                "Roles": [ { "Ref": "PathManagerRole" } ]
            }
        },

        "PathManagerGetDistributablesPolicy" : {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "PathManagerGetDistributablesPolicy",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [ "s3:GetObject" ],
                            "Resource": [ "arn:aws:s3:::composer-dist/*" ]
                        }
                    ]
                },
                "Roles": [ { "Ref": "PathManagerRole" } ]
            }
        },

        "PathManagerCloudwatchPolicy" : {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "PathManagerCloudwatchPolicy",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [ "cloudwatch:*" ],
                            "Resource": "*"
                        }
                    ]
                },
                "Roles": [ { "Ref": "PathManagerRole" } ]
            }
        },

        "PathManagerInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [ {"Ref": "PathManagerRole"} ]
            }
        },

        "SSHSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow SSH access from the office",
                "VpcId": {"Ref": "VpcId"},
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },

        "AppServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "path manager application servers",
                "VpcId": {"Ref": "VpcId"},
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 9000,
                        "ToPort": 9000,
                        "CidrIp": {"Ref": "GuardianIP"}
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 9000,
                        "ToPort": 9000,
                        "SourceSecurityGroupId": { "Ref": "LoadBalancerSecurityGroup"}
                    }
                ]
            }
        },

        "LoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "path manager application load balancer",
                "VpcId": {"Ref": "VpcId"},
                "SecurityGroupIngress": [
                    { "IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "CidrIp": "77.91.251.206/31" },
                    { "IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "CidrIp": "77.91.252.206/31" },
                    { "IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "CidrIp": "77.91.251.220/31" },
                    { "IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "CidrIp": "54.72.146.251/32" },
                    { "IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "CidrIp": "54.154.55.123/32" },
                    { "IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "CidrIp": "54.154.66.109/32" },

                    { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "77.91.251.206/31" },
                    { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "77.91.252.206/31" },
                    { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "77.91.251.220/31" },
                    { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "54.72.146.251/32" },
                    { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "54.154.55.123/32" },
                    { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "54.154.66.109/32" }
                ]
            }
        },

        "PublicPathManagerLoadBalancer" : {
            "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties" : {
                "SecurityGroups": [{ "Fn::GetAtt": ["LoadBalancerSecurityGroup", "GroupId"] }],
                "CrossZone": true,
                "Subnets": {"Ref": "PublicVpcSubnets"},
                "Listeners" : [ {
                    "LoadBalancerPort": "443",
                    "InstancePort": "9000",
                    "Protocol": "HTTPS",
                    "SSLCertificateId": { "Ref": "SSLCertificateARN"}
                },{
                    "LoadBalancerPort": "80",
                    "InstancePort": "9000",
                    "Protocol": "HTTP"
                } ],

                "HealthCheck" : {
                    "Target" : "HTTP:9000/management/healthcheck",
                    "HealthyThreshold" : "2",
                    "UnhealthyThreshold" : "2",
                    "Interval" : "10",
                    "Timeout" : "5"
                }
            }
        },


        "AutoscalingGroup":{
            "Type":"AWS::AutoScaling::AutoScalingGroup",
            "Properties":{
                "AvailabilityZones": {"Fn::GetAZs": ""},
                "VPCZoneIdentifier": {"Ref": "PrivateVpcSubnets"},
                "LaunchConfigurationName":{ "Ref":"PathManagerLaunchConfig" },
                "MinSize":"1",
                "MaxSize":"2",
                "DesiredCapacity": "1",
                "HealthCheckType" : "ELB",
                "HealthCheckGracePeriod": 300,
                "LoadBalancerNames" : [ { "Ref": "PublicPathManagerLoadBalancer" }],
                "Tags":[
                    {
                        "Key":"Stage",
                        "Value":{
                            "Ref":"Stage"
                        },
                        "PropagateAtLaunch":"true"
                    },
                    {
                        "Key": "Stack",
                        "Value": "composer",
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key":"App",
                        "Value":"path-manager",
                        "PropagateAtLaunch":"true"
                    }
                ]
            }
        },

        "PathManagerLaunchConfig":{
            "Type":"AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Authentication": {
                    "distributionAuthentication": {
                        "type": "S3",
                        "roleName": { "Ref": "PathManagerRole" },
                        "buckets": [ "composer-dist" ]
                    }
                },
                "AWS::CloudFormation::Init": {
                    "config": {
                        "users": {
                            "pathmanager": {
                                "homeDir": "/home/pathmanager"
                            }
                        },
                        "files": {
                            "/etc/init/path-manager.conf": {
                                "source": { "Fn::Join" : ["", [
                                    "https://s3-eu-west-1.amazonaws.com/composer-dist/composer/",
                                    { "Ref": "Stage" },
                                    "/path-manager/path-manager.conf"
                                ]]},
                                "authentication": "distributionAuthentication"
                            },
                            "/home/pathmanager/path-manager.tgz": {
                                "source": { "Fn::Join" : ["", [
                                    "https://s3-eu-west-1.amazonaws.com/composer-dist/composer/",
                                    { "Ref": "Stage" },
                                    "/path-manager/path-manager.tgz"
                                ]]},
                                "authentication": "distributionAuthentication"
                            }
                        }
                    }
                }
            },
            "Properties":{
                "KeyName":{ "Ref":"KeyName" },
                "ImageId":"ami-0345d674",
                "SecurityGroups": [
                    { "Ref": "AppServerSecurityGroup" },
                    { "Ref": "SSHSecurityGroup" }
                ],
                "InstanceType": "t2.micro",
                "IamInstanceProfile": {"Ref": "PathManagerInstanceProfile"},
                "UserData":{
                    "Fn::Base64":{
                        "Fn::Join":["", [
                            "#!/bin/bash -ev\n",
                            "locale-gen en_GB.UTF-8\n",

                            "cfn-init -s ", { "Ref" : "AWS::StackId" }, " -r PathManagerLaunchConfig ",
                            "  --region ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",

                            "(cd /home/pathmanager; tar xvzf path-manager.tgz)\n",

                            "mkdir /home/pathmanager/logs\n",

                            "chown -R pathmanager /home/pathmanager\n",
                            "chgrp -R pathmanager /home/pathmanager\n",


                            "start path-manager\n"
                        ]]
                    }
                }
            }
        }
    }
}
